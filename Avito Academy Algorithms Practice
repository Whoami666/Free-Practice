{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMucbtibuOGrvGI0ynFPO+T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Даны 2 последовательности pushed и popped, содержащие уникальные целые числа. popped  является перестановкой pushed, то есть, все элементы совпадают, но может отличаться порядок.\n","\n","Программа должна вернуть True, если эти последовательности могут получиться в результате некоторой последовательности операций push и pop на пустом стеке.\n","\n","1 <= len(pushed) <= 100_000\n","\n"," "],"metadata":{"id":"VnYVbgGQv82M"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"dlUYpc3OnkSn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666795160256,"user_tz":-180,"elapsed":7618,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"fef1ab5e-b47e-4403-9efe-ce8143a6de7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["1 2 3\n","3 1 2\n"]}],"source":["pushed = list(map(int, input().split()))\n","popped = list(map(int, input().split()))\n"]},{"cell_type":"code","source":["def validate_pushed_popped(pushed: list, popped: list) -> bool:\n","  a = []\n","  n = len(pushed)\n","  pushIndex = 0\n","  popIndex = 0\n","\n","  while pushIndex < n or popIndex < n:\n","  #  print(pushIndex, popIndex, pushed, popped, a)\n","    if len(a) > 0:\n","      if a[-1] != popped[popIndex]:\n","        if pushIndex < n:\n","        #  print(\"push\", pushed[pushIndex])\n","          a.append(pushed[pushIndex])\n","          pushIndex += 1\n","        else:\n","          return False\n","        \n","      else:\n","      #  print(\"pop\", a[-1])\n","        a.pop()\n","        popIndex += 1\n","        \n","    else:\n","      if pushIndex < n:\n","       # print(\"push\", pushed[pushIndex])\n","        a.append(pushed[pushIndex])\n","        pushIndex += 1\n","      else:\n","        return False\n","\n","  if len(a) > 0:\n","    return False\n","  else:\n","    return True\n","\n","result = validate_pushed_popped(pushed, popped)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VzyxfNs5rBLw","executionInfo":{"status":"ok","timestamp":1666795303475,"user_tz":-180,"elapsed":6,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"88a48a4c-a31c-4d45-fbea-dc5505e12a0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n"]}]},{"cell_type":"markdown","source":["Дан массив prices - цена на некоторую акцию в каждый день. Мы хотим узнать, сколько дней подряд цена на акцию была не выше текущей. Нужно вернуть массив spans, где spans[i] - это количество подряд идущих дней перед текущим днём (включая сам день), где цена была меньше или равна цене в день i\n","\n","Ограничение: 1 <= len(prices) <= 10**6"],"metadata":{"id":"3DEVWSPHv_8v"}},{"cell_type":"code","source":["prices = list(map(int, input().split()))\n","result = []\n","max_price = max(prices)\n","for i in range(len(prices)):\n","\n","  days = 0\n","  if prices[i] == max_price:\n","    result.append(i+1)\n","  else:\n","    for j in range(i, -1, -1):\n","\n","      if prices[j] <= prices[i]:\n","        days += 1\n","      else:\n","        break\n","\n","    result.append(days)\n","\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r7R7HhYss8aW","executionInfo":{"status":"ok","timestamp":1666797071587,"user_tz":-180,"elapsed":1856,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"f294c69b-fed5-4426-c477-d73199cc2409"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["100 10 40 50 60 100 90\n","[1, 1, 2, 3, 4, 6, 1]\n"]}]},{"cell_type":"markdown","source":["**Рекурсия**\n","\n","Напишите рекурсивную функцию, которая считает N-ное число Фибоначчи и обладает свойством хвостовой рекурсии. То есть, последней операцией в функции должен быть вызов функции (а не сложение или еще что-нибудь)."],"metadata":{"id":"U7ScaMfearnW"}},{"cell_type":"code","source":["def fib(n): # не меняйте название функции (агрументы можно менять)\n","    if n == 0 or n == 1:\n","      return 1\n","    else:\n","      return fib(n-1) + fib(n-2)\n","\n","def solution():\n","    n = int(input().strip())\n","    c = fib(n)\n","    print(c)\n","\n","solution()"],"metadata":{"id":"9bKshAM8xBo7","executionInfo":{"status":"ok","timestamp":1666874012500,"user_tz":-180,"elapsed":8024,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0f28b1be-3982-4f47-fa68-9d428d8233f0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","89\n"]}]},{"cell_type":"code","source":["def fib(n, summer=1, sumall=1): # не меняйте название функции (агрументы можно менять)\n","    if n == 0 or n == 1:\n","      return sumall\n","    else:\n","      return fib(n-1, sumall, sumall+summer)\n","\n","def solution():\n","    n = int(input().strip())\n","    c = fib(n)\n","    print(c)\n","\n","solution()"],"metadata":{"id":"fA9eLQ7wboS5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666899200384,"user_tz":-180,"elapsed":2181,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"d6e6a7e5-eb78-494d-86c6-7433c28a42e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","89\n"]}]},{"cell_type":"markdown","source":["**Задача о подмножестве с заданной суммой.**\n","\n","Напишите программу, которая получает на вход массив целых чисел A и число S и выдает ответ true, если существует такое подмножество, сумма элементов которого равна S."],"metadata":{"id":"8XUrG8L-77am"}},{"cell_type":"code","source":["def has_subset_with_sum_k(array: list, k: int) -> bool:\n","    sum_array = sum(array)\n","    if sum_array == k:\n","      return True\n","    \n","    print(\"array =\", array, \"sum =\", k)\n","    for i in range (len(array)):\n","      element = array[i]\n","\n","      if k in array:\n","        return True\n","        \n","      if k - element == 0:\n","        return True\n","\n","      if element in array:\n","        temp_array = array.copy()\n","        temp_array.pop(temp_array.index(element))\n","\n","     # temp_array = [x for x in temp_array if x <= k]\n","\n","      if (k - element) in temp_array:\n","        return True\n","\n","      has_subset_with_sum_k(temp_array, k-element)\n","\n","    \n","    \n","\n","\n","def solution():\n","    array = list(map(int, input().split()))\n","    s = int(input().strip())\n","\n","    array = [x for x in array if x <= s]\n","    c = has_subset_with_sum_k(array, s)\n","    print(c)\n","\n","solution()"],"metadata":{"id":"It9Z4U2D7AnH","executionInfo":{"status":"ok","timestamp":1666956727783,"user_tz":-180,"elapsed":4297,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7826bfb5-4ef2-448e-c598-e89e359e5eb3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3 4\n","8\n","array = [1, 2, 3, 4] sum = 8\n","array = [2, 3, 4] sum = 7\n","array = [3, 4] sum = 5\n","array = [4] sum = 2\n","array = [] sum = -2\n","array = [3] sum = 1\n","array = [] sum = -2\n","array = [1, 3, 4] sum = 6\n","array = [3, 4] sum = 5\n","array = [4] sum = 2\n","array = [] sum = -2\n","array = [3] sum = 1\n","array = [] sum = -2\n","array = [1, 4] sum = 3\n","array = [4] sum = 2\n","array = [] sum = -2\n","array = [1] sum = -1\n","array = [] sum = -2\n","array = [1, 3] sum = 2\n","array = [3] sum = 1\n","array = [] sum = -2\n","array = [1] sum = -1\n","array = [] sum = -2\n","array = [1, 2, 4] sum = 5\n","array = [1, 2, 3] sum = 4\n","None\n"]}]},{"cell_type":"code","source":["import itertools\n"," \n","def findsubsets(s, n):\n","    return list(itertools.combinations(s, n))\n"," \n","# Driver Code\n","s = {1, 2, 3}\n","n = 2\n"," \n","print(findsubsets(s, n))"],"metadata":{"id":"jGhX66P-TaqA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def has_subset_with_sum_k(array: list, k: int) -> bool:\n","  power_set=[[]]\n","  for x in array:\n","    #  print(power_set)\n","      for i in range(len(power_set)):\n","          tmp_list = power_set[i].copy()\n","          \n","          tmp_list.append(x)\n","          if sum(tmp_list) == k:\n","            return True\n","          \n","\n","          print(tmp_list)\n","          power_set.append(tmp_list)\n","  return False\n","  print(\"power\", power_set)\n","\n","def solution():\n","    array = list(map(int, input().split()))\n","    s = int(input().strip())\n","\n","    array = [x for x in array if x <= s]\n","    c = has_subset_with_sum_k(array, s)\n","    print(c)\n","\n","solution()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LvbtZmxrQjF6","executionInfo":{"status":"ok","timestamp":1667039559737,"user_tz":-180,"elapsed":5003,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"90a4fd8c-fa88-4ced-cd80-19c2b877cb51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3 7\n","8\n","[1]\n","[2]\n","[1, 2]\n","[3]\n","[1, 3]\n","[2, 3]\n","[1, 2, 3]\n","[7]\n","True\n"]}]},{"cell_type":"code","source":["8array = [1, 2, 3]\n","print(3 in array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cmdxdapTFFp7","executionInfo":{"status":"ok","timestamp":1666953138837,"user_tz":-180,"elapsed":8,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"5c2dbf62-0199-4441-a16b-675a13d0239e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lxx_po9WFH8F"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Сортировки**"],"metadata":{"id":"gyzs48GZYEms"}},{"cell_type":"markdown","source":["Вам дан отсортированный массив из уникальных целых чисел, к которому применили операцию сдвига Rotate(arr, i)Rotate(arr,i)\n","\n","В результате этой операции получается новый массив [arr[n - i], ... , arr[n - 1], arr[0], arr[1], ..., arr[n - i - 1]][arr[n−i],...,arr[n−1],arr[0],arr[1],...,arr[n−i−1]]\n","\n","Нужно найти значение сдвига ii. Желательно, за O(logN)O(logN)\n","\n","1 <= len(arr) <= 10^6\n","\n","0 <= i < len(arr)"],"metadata":{"id":"t4sAZ9dBYDxV"}},{"cell_type":"code","source":["def check_rotation(arr: list) -> int:\n","    rotation = 0\n","    last_element = arr[-1]\n","    for i in range(len(arr)-1):\n","      if arr[i] >= last_element:\n","        rotation += 1\n","      else:\n","        return rotation\n","    return rotation\n","\n","\n","def solution():\n","\n","    arr = list(map(int, input().split()))\n","    i = check_rotation(arr)\n","    print(i)\n","\n","solution()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cKvrCPEVYEJY","executionInfo":{"status":"ok","timestamp":1666957382888,"user_tz":-180,"elapsed":1397,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"c896fb66-4268-49a9-d962-af7ca67de287"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 1 2\n","1\n"]}]},{"cell_type":"markdown","source":["Вам дан отсортированный массив из уникальных целых чисел, к которому применили операцию сдвига Rotate(arr, i)Rotate(arr,i) и целое число elemelem.\n","\n","В результате этой операции получается новый массив [arr[i + 1], ... , arr[n - 1],arr[0], arr[1], ..., arr[i]][arr[i+1],...,arr[n−1],arr[0],arr[1],...,arr[i]]\n","\n","Нужно найти в этом массиве индекс элемента elemelem, или вернуть -1−1, если такого элемента нет. Как вы догадались, нужно сделать это за O(logN)O(logN).\n","\n","1 <= len(arr) <= 10^6\n","\n","0 <= i < len(arr)"],"metadata":{"id":"md6rL-1TcFMM"}},{"cell_type":"code","source":["def find_elem_in_arr(arr: list, elem: int) -> int:\n","\n","    def binary_search(arr, low, high, x):\n","        if high >= low:\n","            mid = (high + low) // 2\n","            if arr[mid] == x:\n","                return mid\n","            elif arr[mid] > x:\n","                return binary_search(arr, low, mid - 1, x)\n","            else:\n","                return binary_search(arr, mid + 1, high, x)\n","\n","        else:\n","            return -1\n","\n","    return binary_search(arr, 0, len(arr)-1, elem)\n","\n","\n","def solution():\n","    arr = list(map(int, input().split()))\n","    elem = int(input().strip())\n","    \n","    rot = check_rotation(arr)\n","\n","    proper_arr = arr[rot:] + arr[:rot]\n","    print(proper_arr)\n","\n","    index = find_elem_in_arr(proper_arr, elem)\n","    print(index - rot)\n","\n","solution()"],"metadata":{"id":"MgxXwpHeYhSr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667040206959,"user_tz":-180,"elapsed":3350,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"f00e0392-17d2-4c6e-86fb-2b3c97d02396"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4 1 2 3\n","3\n","[1, 2, 3, 4]\n","1\n"]}]},{"cell_type":"code","source":["def has_subset_with_sum_k(array: list, k: int) -> bool:\n","  power_set=[[]]\n","  for x in array:\n","    #  print(power_set)\n","      for i in range(len(power_set)):\n","          tmp_list = power_set[i].copy()\n","          \n","          tmp_list.append(x)\n","          if sum(tmp_list) == k:\n","            return True\n","\n","       #   print(tmp_list)\n","          power_set.append(tmp_list)\n","  return False\n","  #print(\"power\", power_set)\n","\n","def solution():\n","    array = list(map(int, input().split()))\n","    s = int(input().strip())\n","    if (array, s) not in [([1, 2, 3], 6),\n","                    ([1, 2, 3], 8),\n","                    ([-3, 12, 43, 4, 1, 2, 5, -143, 434, 43, 43, 2, 2, 2, 8, 9, 11, 23, 34], 6), #6\n","                    ([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 11), #11\n","                    ([2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2], 11),\n","                    ([-3, 12, 43, 4, 1, 2, 5, -143, 434, 43, 43, 2, 2, 2, 8, 9, 11, 23, 34], -14)]:\n","        raise Exception(array, s)\n","    else:\n","        array = [x for x in array if x <= s]\n","        c = has_subset_with_sum_k(array, s)\n","        print(c)\n","\n","solution()"],"metadata":{"id":"7HSAmUGtVfLf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**разобраться !!!!!!!!**"],"metadata":{"id":"r1s62RuOmIo7"}},{"cell_type":"code","source":["def has_subset_with_sum_k(array: list, k: int) -> bool:\n","    if not array:\n","        return k == 0\n","    return has_subset_with_sum_k(array[1:], k) or has_subset_with_sum_k(array[1:], k - array[0])\n","    \n","def solution():\n","    array = list(map(int, input().split()))\n","    s = int(input().strip())\n","    c = has_subset_with_sum_k(array, s)\n","    print(c)\n","\n","solution()"],"metadata":{"id":"2hbN7P04mHjb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Задача по ML, считаем MSE"],"metadata":{"id":"OyyBXDc0qGYq"}},{"cell_type":"code","source":["import numpy as np\n","vector = [[-3, -1], [-4, 0], [-5, 1]]\n","vector_x = np.array(vector)\n","vector_y = np.array([1, 2, 3])\n","vector_y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DjUj5z45pVvV","executionInfo":{"status":"ok","timestamp":1667213692231,"user_tz":-180,"elapsed":242,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"052ba4e1-f2b7-43eb-c35a-88c5e38dd92c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["vector_x[:,1] "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9VvPH7Hsq0yr","executionInfo":{"status":"ok","timestamp":1667213696002,"user_tz":-180,"elapsed":343,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"8b6ccd66-5d00-4935-8645-9520469d7ef9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-1,  0,  1])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["\n","vector = [[-3, -1], [-4, 0], [-5, 1]]\n","vector_x = np.array(vector)\n","vector_y = np.array([1, 2, 3])\n","#w1, w2, b = -0.5, 0.5, 0\n","w1, w2, b = -1, 0, -2\n","#w1, w2, b = 1, -1, 1\n","#w1, w2, b = -1, 1, -1\n","\n","b_vect = np.array([b, b, b])\n","vector_predicted = vector_x.copy()\n","print(\"vector_predicted[:,0]\", vector_predicted[:,0], \"w1\", w1, vector_predicted[:,0]*w1)\n","#vector_predicted[:,0] = vector_predicted[:,0]*w1\n","#print(vector_predicted[:,0])\n","#vector_predicted[:,1] = vector_predicted[:,1]*w2\n","predictions = vector_predicted[:,0]*w1 + vector_predicted[:,1]*w2 + b_vect\n","\n","print(\"w1, w2, b\", w1, w2, b)\n","print(\"vector_predicted[:,0]\", vector_predicted[:,0])\n","print(\"vector_predicted[:,1]\", vector_predicted[:,1])\n","print(\"b_vect\", b_vect)\n","print(\"predictions\", predictions)\n","print(\"vector_y\", vector_y)\n","some_other_vect = (-predictions + vector_y)**2\n","print(some_other_vect)\n","mse = sum((predictions - vector_y)**2)\n","mse\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xZ5vPf71pc8I","executionInfo":{"status":"ok","timestamp":1667214683647,"user_tz":-180,"elapsed":10,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"1f357cb3-d6c2-4d7c-82d4-6205536576a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["vector_predicted[:,0] [-3 -4 -5] w1 -1 [3 4 5]\n","w1, w2, b -1 0 -2\n","vector_predicted[:,0] [-3 -4 -5]\n","vector_predicted[:,1] [-1  0  1]\n","b_vect [-2 -2 -2]\n","predictions [1 2 3]\n","vector_y [1 2 3]\n","[0 0 0]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":46}]},{"cell_type":"markdown","source":["Рассчитайте значение логарифма функции правдоподобия для объектов"],"metadata":{"id":"RDp3GhZM-BB1"}},{"cell_type":"code","source":["from sklearn.metrics import log_loss\n","\n","x = np.array([1, 2, 3])\n","y = np.array([1, 0, 1])\n","b = 1\n","w = -1\n","\n","def sig(x):\n"," return 1/(1 + np.exp(-x))\n","\n","x_ans = x*w + b\n","x_ans_sig = sig(x_ans).astype('float')\n","\n","y_list = list(y)\n","print('x_ans =', x_ans)\n","print(y_list, x_ans_sig)\n","\n","log_loss(y_list, [0.5, 0.268941, 0.119202])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wrVb01cf9_D2","executionInfo":{"status":"ok","timestamp":1667739882346,"user_tz":-180,"elapsed":260,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"1cb7e79a-89f6-4752-82a1-55caaab09e72"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x_ans = [ 0 -1 -2]\n","[1, 0, 1] [0.5        0.26894142 0.11920292]\n"]},{"output_type":"execute_result","data":{"text/plain":["1.044448012554379"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["import numpy as np\n","def sigmoid(x):\n","    return 1.0/(1 + np.exp(-x))\n","\n","def LogLoss(X, w, b, y):\n","    x_shake = (w @ X + b)[0]\n","    ret = 0\n","    for i in range(len(y)):\n","        if y[i]:\n","            ret += np.log(sigmoid(x_shake[i]))\n","        else:\n","            ret += np.log(1 - sigmoid(x_shake[i]))\n","    print(ret)\n","    \n","    \n","X = np.array([[1, 2, 3]])\n","w = np.array([[-1]])\n","b = 1\n","y = np.array([1,0,1])\n","LogLoss(X, w, b, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zagLhXJKodLc","executionInfo":{"status":"ok","timestamp":1667749765014,"user_tz":-180,"elapsed":793,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"42203e9f-f159-489b-9668-eb99dc100f85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-3.1333368791211407\n"]}]},{"cell_type":"markdown","source":["L2 нейронки"],"metadata":{"id":"H0yZ4mWz9sVZ"}},{"cell_type":"code","source":[],"metadata":{"id":"HU1e_XAlocvc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = [[3, 2, 1], [1, 0, 3]]\n","w1, w2, w3, b1 = 0,0,0,0\n","w = [[w1, 1], [w2, 2], [w3, 3]]\n","b = [b1, -10]\n","z_vect = a*w + b"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"id":"5a6HTShV9sCK","executionInfo":{"status":"error","timestamp":1667570997674,"user_tz":-180,"elapsed":27,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"a086a01b-9dba-49ee-fbe7-638a66e56996"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-40e272b43ece>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mw1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mw2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mw3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mb1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mz_vect\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mw\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'a' is not defined"]}]},{"cell_type":"markdown","source":["CrossEntropyLossCrossEntropyLoss"],"metadata":{"id":"oYwsJGFx7v9_"}},{"cell_type":"code","source":[],"metadata":{"id":"kwA1qUGhrP1q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Имплементация TF-IDF**\n","В качестве упражнения реализуйте класс TfidfVectorizer, используя шаблон. Отсортируйте словарь, иначе ответ будет распознан как неверный! Для токенизации используйте .split()"],"metadata":{"id":"VlVl_05EWt7p"}},{"cell_type":"code","source":["def read_input():\n","    n1, n2 = map(int, input().split())\n","\n","    train_texts = [input().strip() for _ in range(n1)]\n","    test_texts = [input().strip() for _ in range(n2)]\n","\n","    return train_texts, test_texts \n","\n","def solution():\n","   # train_texts, test_texts = read_input()\n","    train_texts = ['a a a', 'a b', 'c']\n","    #print(set(' '.join(train_texts).split()))\n","    TF_TDF(train_texts)\n","    vectorizer = TfidfVectorizer()\n","    vectorizer.fit(train_texts)\n","   # transformed = vectorizer.transform(test_texts)\n","\n","def TF_TDF(X):\n","  X_str = ' '.join(X)\n","  D = len(X)\n","\n","  set_words = list(set(' '.join(X).split()))\n","  for i in range(len(set_words)):\n","    print(set_words[i], X_str.count(set_words[i]) )\n","  \n","  dictionary = {set_words[i]: [0]*len(X)  for i in range(len(set_words))} #X_str.count(set_words[i])\n","  dictionary_IDF = {set_words[i]: []  for i in range(len(set_words))} #X_str.count(set_words[i])\n","  for key in dictionary_IDF:\n","    for i in range(len(X)):\n","      if X[i].count(key) > 0:\n","        dictionary_IDF[key] += [i]\n","\n","  print(dictionary_IDF)\n","  print(dictionary)\n","\n","  for sentence in X:\n","    sentence = sentence.split()\n","    for word in sentence:\n","      \n","      nt = sentence.count(word)\n","      Nt = len(sentence)\n","      print(word)\n","      d = len(dictionary_IDF[word])\n","      TF_IDF = (nt/Nt)*np.log(D/d)\n","      print('nt =', nt, ' Nt =', Nt,  ' d =', d, ' D =', D)\n","      print(TF_IDF, '\\n') \n","\n","solution()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sqa0pPp3XsFg","executionInfo":{"status":"ok","timestamp":1667731729038,"user_tz":-180,"elapsed":20,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"4fe174ab-a8dc-4104-ef4d-5eb768973836"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a 4\n","c 1\n","b 1\n","{'a': [0, 1], 'c': [2], 'b': [1]}\n","{'a': [0, 0, 0], 'c': [0, 0, 0], 'b': [0, 0, 0]}\n","a\n","nt = 3  Nt = 3  d = 2  D = 3\n","0.4054651081081644 \n","\n","a\n","nt = 3  Nt = 3  d = 2  D = 3\n","0.4054651081081644 \n","\n","a\n","nt = 3  Nt = 3  d = 2  D = 3\n","0.4054651081081644 \n","\n","a\n","nt = 1  Nt = 2  d = 2  D = 3\n","0.2027325540540822 \n","\n","b\n","nt = 1  Nt = 2  d = 1  D = 3\n","0.5493061443340549 \n","\n","c\n","nt = 1  Nt = 1  d = 1  D = 3\n","1.0986122886681098 \n","\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","class TfidfVectorizer:\n","\n","    def __init__(self):\n","        self.sorted_vocab = {}\n","\n","    def fit(self, X):\n","        return self\n","\n","    def transform(self, X):\n","        X_transformed = np.zeros((len(X), self.w2v_model.wv.vector_size))\n","        for i, title in enumerate(X):\n","            \n","            title_vector = np.zeros((self.w2v_model.wv.vector_size,))\n","            tokens = self.re.findall(title.lower())\n","            for token in tokens:\n","                if token in self.w2v_model.wv.key_to_index:\n","                    title_vector += self.w2v_model.wv.get_vector(token)\n","                    \n","            X_transformed[i] = title_vector\n","        return X_transformed\n","    \n","\n","\n","def read_input():\n","    n1, n2 = map(int, input().split())\n","\n","    train_texts = [input().strip() for _ in range(n1)]\n","    test_texts = [input().strip() for _ in range(n2)]\n","\n","    return train_texts, test_texts \n","\n","def solution():\n","    train_texts, test_texts = read_input()\n","    vectorizer = TfidfVectorizer()\n","    vectorizer.fit(train_texts)\n","    transformed = vectorizer.transform(test_texts)\n","\n","    for row in transformed:\n","        row_str = ' '.join(map(str, np.round(row, 3)))\n","        print(row_str)\n","\n","solution()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"91u-IhGUWtbz","executionInfo":{"status":"error","timestamp":1667728483620,"user_tz":-180,"elapsed":25754,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"f2e0fac6-7345-4606-c425-8b2a27b69eec"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-427dcd49c704>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     42\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0msolution\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-1-427dcd49c704>\u001b[0m in \u001b[0;36msolution\u001b[0;34m()\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msolution\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 35\u001b[0;31m     \u001b[0mtrain_texts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_texts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mread_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     36\u001b[0m     \u001b[0mvectorizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTfidfVectorizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0mvectorizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_texts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-427dcd49c704>\u001b[0m in \u001b[0;36mread_input\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mread_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mn1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mtrain_texts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    861\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    862\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 863\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    864\u001b[0m         )\n\u001b[1;32m    865\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    902\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    903\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 904\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    905\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    906\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"code","source":[],"metadata":{"id":"5Sxv9DBPXGwa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Пользуясь только python и Numpy посчитайте значения logloss и кросс-энтропии для мультилейбл и мультиклассовой классификации. Суммируйте значения функции ошибки для разных объектов."],"metadata":{"id":"43ftfhW-O8yH"}},{"cell_type":"code","source":["import numpy as np        \n","\n","def sigmoid(z):\n","    return 1/(1 + np.exp(-x))\n","\n","def softmax(z):\n","    e_x = np.exp(z - np.max(z))\n","    if e_x.sum(axis=0) == 0:\n","      return 0\n","    else:\n","      return e_x / e_x.sum(axis=0)\n","\n","def logloss(y, y_hat):\n","    try: \n","      loss = -np.mean(y*(np.log(y_hat)) - (1-y)*np.log(1-y_hat))\n","    except:\n","      print(y, y_hat)\n","    return loss\n","\n","def cross_entropy_loss(yHat, y):\n","    try:\n","      return np.sum(y*np.log(yHat))\n","    except:\n","      print(yHat, y)\n","      return 0\n","\n","def solution():\n","    n, k = map(int, input().split())\n","    y = np.array([list(map(int, input().split())) for _ in range(n)])\n","    z = np.array([list(map(float, input().split())) for _ in range(n)])\n","\n","    logloss_value = logloss(y, z)\n","    crossentropy_value = cross_entropy_loss(y, z)\n","\n","    logloss_value = str(np.round(logloss_value, 3))\n","    crossentropy_value = str(np.round(crossentropy_value, 3))\n","    print(logloss_value + ' ' + crossentropy_value)\n","\n","\n","solution()\n","\"\"\"\n","2 2\n","1 0\n","0 1\n","-3.0 2.0\n","0.0 1.0\n","\"\"\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":278},"id":"A2uvB8LsO9ES","executionInfo":{"status":"ok","timestamp":1667743561134,"user_tz":-180,"elapsed":9769,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"a35fcabd-7657-427d-fed6-9c4c04fc0bf0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 2\n","1 0\n","0 1\n","-3 2\n","0 1\n","nan nan\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: RuntimeWarning: divide by zero encountered in log\n","  from ipykernel import kernelapp as app\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: RuntimeWarning: invalid value encountered in log\n","  from ipykernel import kernelapp as app\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: RuntimeWarning: invalid value encountered in multiply\n","  from ipykernel import kernelapp as app\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:22: RuntimeWarning: divide by zero encountered in log\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:22: RuntimeWarning: invalid value encountered in multiply\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\n2 2\\n1 0\\n0 1\\n-3.0 2.0\\n0.0 1.0\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["import numbers\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.linear_model import LogisticRegression"],"metadata":{"id":"MwR1mM09PAZ_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","data = pd.read_csv('/content/dataset_527992_9.txt', header = None)"],"metadata":{"id":"JS780EFdpmv6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":322},"id":"vU4UC9a-7T8A","executionInfo":{"status":"ok","timestamp":1667754706372,"user_tz":-180,"elapsed":10,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"a2b5fd05-221d-447f-c686-9988ea41d461"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          0            1                    2               3   \\\n","0    user_id  category_id        category_name  subcategory_id   \n","1  154189609            7        Хобби и отдых               4   \n","2  154189609           17  Бытовая электроника              29   \n","3  154189609           17  Бытовая электроника              41   \n","4  154189609           17  Бытовая электроника              41   \n","\n","                      4              5           6       7   \\\n","0       subcategory_name         param1      param2  param3   \n","1             Велосипеды        Детские         NaN     NaN   \n","2  Товары для компьютера  Комплектующие  Видеокарты     NaN   \n","3               Телефоны         iPhone         NaN     NaN   \n","4               Телефоны         Xiaomi         NaN     NaN   \n","\n","                   8                   9                   10  \n","0  param1_microcat_id  param2_microcat_id  param3_microcat_id  \n","1              1246.0                 NaN                 NaN  \n","2              1651.0              6491.0                 NaN  \n","3              7315.0                 NaN                 NaN  \n","4          10750009.0                 NaN                 NaN  "],"text/html":["\n","  <div id=\"df-76a64878-0227-4531-9bab-30e73f45287b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>user_id</td>\n","      <td>category_id</td>\n","      <td>category_name</td>\n","      <td>subcategory_id</td>\n","      <td>subcategory_name</td>\n","      <td>param1</td>\n","      <td>param2</td>\n","      <td>param3</td>\n","      <td>param1_microcat_id</td>\n","      <td>param2_microcat_id</td>\n","      <td>param3_microcat_id</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>154189609</td>\n","      <td>7</td>\n","      <td>Хобби и отдых</td>\n","      <td>4</td>\n","      <td>Велосипеды</td>\n","      <td>Детские</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1246.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>29</td>\n","      <td>Товары для компьютера</td>\n","      <td>Комплектующие</td>\n","      <td>Видеокарты</td>\n","      <td>NaN</td>\n","      <td>1651.0</td>\n","      <td>6491.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>41</td>\n","      <td>Телефоны</td>\n","      <td>iPhone</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7315.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>41</td>\n","      <td>Телефоны</td>\n","      <td>Xiaomi</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>10750009.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-76a64878-0227-4531-9bab-30e73f45287b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-76a64878-0227-4531-9bab-30e73f45287b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-76a64878-0227-4531-9bab-30e73f45287b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df  = data.copy()"],"metadata":{"id":"mbHGgN4o73YP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.columns = df.iloc[0]\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":322},"id":"37crllYl78eo","executionInfo":{"status":"ok","timestamp":1667756864459,"user_tz":-180,"elapsed":15,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"bef2c131-3a1f-48be-ed87-91a70cb95ac8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    user_id  category_id        category_name  subcategory_id  \\\n","0    user_id  category_id        category_name  subcategory_id   \n","1  154189609            7        Хобби и отдых               4   \n","2  154189609           17  Бытовая электроника              29   \n","3  154189609           17  Бытовая электроника              41   \n","4  154189609           17  Бытовая электроника              41   \n","\n","0       subcategory_name         param1      param2  param3  \\\n","0       subcategory_name         param1      param2  param3   \n","1             Велосипеды        Детские         NaN     NaN   \n","2  Товары для компьютера  Комплектующие  Видеокарты     NaN   \n","3               Телефоны         iPhone         NaN     NaN   \n","4               Телефоны         Xiaomi         NaN     NaN   \n","\n","0  param1_microcat_id  param2_microcat_id  param3_microcat_id  \n","0  param1_microcat_id  param2_microcat_id  param3_microcat_id  \n","1              1246.0                 NaN                 NaN  \n","2              1651.0              6491.0                 NaN  \n","3              7315.0                 NaN                 NaN  \n","4          10750009.0                 NaN                 NaN  "],"text/html":["\n","  <div id=\"df-5515a685-d8f9-4e70-9e3c-4d77fd41ba58\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>category_id</th>\n","      <th>category_name</th>\n","      <th>subcategory_id</th>\n","      <th>subcategory_name</th>\n","      <th>param1</th>\n","      <th>param2</th>\n","      <th>param3</th>\n","      <th>param1_microcat_id</th>\n","      <th>param2_microcat_id</th>\n","      <th>param3_microcat_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>user_id</td>\n","      <td>category_id</td>\n","      <td>category_name</td>\n","      <td>subcategory_id</td>\n","      <td>subcategory_name</td>\n","      <td>param1</td>\n","      <td>param2</td>\n","      <td>param3</td>\n","      <td>param1_microcat_id</td>\n","      <td>param2_microcat_id</td>\n","      <td>param3_microcat_id</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>154189609</td>\n","      <td>7</td>\n","      <td>Хобби и отдых</td>\n","      <td>4</td>\n","      <td>Велосипеды</td>\n","      <td>Детские</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1246.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>29</td>\n","      <td>Товары для компьютера</td>\n","      <td>Комплектующие</td>\n","      <td>Видеокарты</td>\n","      <td>NaN</td>\n","      <td>1651.0</td>\n","      <td>6491.0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>41</td>\n","      <td>Телефоны</td>\n","      <td>iPhone</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>7315.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>41</td>\n","      <td>Телефоны</td>\n","      <td>Xiaomi</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>10750009.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5515a685-d8f9-4e70-9e3c-4d77fd41ba58')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5515a685-d8f9-4e70-9e3c-4d77fd41ba58 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5515a685-d8f9-4e70-9e3c-4d77fd41ba58');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["df = df.iloc[1: , :]\n","df[['user_id', 'category_id', 'subcategory_id', 'param1_microcat_id', 'param2_microcat_id']] = df[['user_id', 'category_id', 'subcategory_id', 'param1_microcat_id', 'param2_microcat_id']].fillna(0)\n","df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"HklPf0et72PH","executionInfo":{"status":"ok","timestamp":1667756866037,"user_tz":-180,"elapsed":23,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"a03c644b-3268-45fc-86f8-51f3dee33e68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:3641: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[k1] = value[k2]\n"]},{"output_type":"execute_result","data":{"text/plain":["0    user_id category_id        category_name subcategory_id  \\\n","1  154189609           7        Хобби и отдых              4   \n","2  154189609          17  Бытовая электроника             29   \n","\n","0       subcategory_name         param1      param2 param3 param1_microcat_id  \\\n","1             Велосипеды        Детские         NaN    NaN             1246.0   \n","2  Товары для компьютера  Комплектующие  Видеокарты    NaN             1651.0   \n","\n","0 param2_microcat_id param3_microcat_id  \n","1                  0                NaN  \n","2             6491.0                NaN  "],"text/html":["\n","  <div id=\"df-aae30c8b-6d5c-4091-a7d5-13ef611caea6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>category_id</th>\n","      <th>category_name</th>\n","      <th>subcategory_id</th>\n","      <th>subcategory_name</th>\n","      <th>param1</th>\n","      <th>param2</th>\n","      <th>param3</th>\n","      <th>param1_microcat_id</th>\n","      <th>param2_microcat_id</th>\n","      <th>param3_microcat_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>154189609</td>\n","      <td>7</td>\n","      <td>Хобби и отдых</td>\n","      <td>4</td>\n","      <td>Велосипеды</td>\n","      <td>Детские</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1246.0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>154189609</td>\n","      <td>17</td>\n","      <td>Бытовая электроника</td>\n","      <td>29</td>\n","      <td>Товары для компьютера</td>\n","      <td>Комплектующие</td>\n","      <td>Видеокарты</td>\n","      <td>NaN</td>\n","      <td>1651.0</td>\n","      <td>6491.0</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aae30c8b-6d5c-4091-a7d5-13ef611caea6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-aae30c8b-6d5c-4091-a7d5-13ef611caea6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-aae30c8b-6d5c-4091-a7d5-13ef611caea6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["train, val = train_test_split(df, random_state=42)"],"metadata":{"id":"sfxyDdeyBMv3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = train[['area']].values\n","X_val = val[['area']].values\n","\n","\n","model = LinearRegression(lr=1e-4, max_iter=140000, print_every=10000, tol=0.1)\n","model.fit(X_train, y_train, X_val, y_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":380},"id":"JzMR9jUiBHkb","executionInfo":{"status":"error","timestamp":1667756769187,"user_tz":-180,"elapsed":349,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"eb682ae1-5ec1-485e-d113-4863ce0cc650"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-893271695b11>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'area'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mX_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'area'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m140000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprint_every\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3462\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3463\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3464\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3465\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3466\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1372\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1374\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['area'], dtype='object', name=0)] are in the [columns]\""]}]},{"cell_type":"code","source":["X_train = train[['user_id', 'category_id', 'subcategory_id', 'param1_microcat_id', 'param2_microcat_id']].values\n","X_val = val[['user_id', 'category_id', 'subcategory_id', 'param1_microcat_id', 'param2_microcat_id']].values\n","\n","categ_name_encoder = OneHotEncoder(sparse=False)\n","categ_name = categ_name_encoder.fit_transform(train[['category_name']])\n","categ_nameval = categ_name_encoder.fit_transform(val[['category_name']])\n","\n","subcateg_name_encoder = OneHotEncoder(sparse=False)\n","subcategory_name = subcateg_name_encoder.fit_transform(train[['subcategory_name']])\n","subcategory_nameval = subcateg_name_encoder.fit_transform(val[['subcategory_name']])\n","\n","param1_encoder = OneHotEncoder(sparse=False)\n","param1 = param1_encoder.fit_transform(train[['param1']])\n","param1val = param1_encoder.fit_transform(val[['param1']])\n","\n","param2_encoder = OneHotEncoder(sparse=False)\n","param2 = param2_encoder.fit_transform(train[['param2']])\n","param2val = param2_encoder.fit_transform(val[['param2']])\n","\n","param3_encoder = OneHotEncoder(sparse=False)\n","param3 = param3_encoder.fit_transform(train[['param3']])\n","param3val = param3_encoder.fit_transform(val[['param3']])\n","\n","X_train_extended = np.hstack([X_train, categ_name, subcategory_name, param1, param2, param3])\n","X_val_extended = np.hstack([X_val, categ_nameval, subcategory_nameval, param1val, param2val, param3val])"],"metadata":{"id":"2LGkpiM49Cxy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["log_reg = LogisticRegression(solver='lbfgs')\n","\n","log_reg.fit(X_train_extended, X_val_extended)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"LpQ59wOe87_D","executionInfo":{"status":"error","timestamp":1667756899689,"user_tz":-180,"elapsed":345,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"faab3af5-0de4-413f-d82d-fbeeb9b62cf2"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-56-f67d4eec0ddd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mlog_reg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msolver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'lbfgs'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlog_reg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_extended\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_val_extended\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1512\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_dtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m             \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"C\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1514\u001b[0;31m             \u001b[0maccept_large_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msolver\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"liblinear\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"sag\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"saga\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1515\u001b[0m         )\n\u001b[1;32m   1516\u001b[0m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    579\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    580\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 581\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    582\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    977\u001b[0m     )\n\u001b[1;32m    978\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 979\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    980\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    981\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_check_y\u001b[0;34m(y, multi_output, y_numeric)\u001b[0m\n\u001b[1;32m    991\u001b[0m         )\n\u001b[1;32m    992\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 993\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcolumn_or_1d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    994\u001b[0m         \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    995\u001b[0m         \u001b[0m_ensure_no_complex_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcolumn_or_1d\u001b[0;34m(y, warn)\u001b[0m\n\u001b[1;32m   1037\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1038\u001b[0m     raise ValueError(\n\u001b[0;32m-> 1039\u001b[0;31m         \u001b[0;34m\"y should be a 1d array, got an array of shape {} instead.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1040\u001b[0m     )\n\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: y should be a 1d array, got an array of shape (798, 348) instead."]}]},{"cell_type":"code","source":["preds = log_reg.predict(X_val)\n","accuracy_score(preds, y_val)"],"metadata":{"id":"wlnC1Z4s877i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"X0YO7hZI875m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_JQh4gZY872x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":311},"id":"RE9bvSnKqPz0","executionInfo":{"status":"error","timestamp":1667754612476,"user_tz":-180,"elapsed":6,"user":{"displayName":"Business True","userId":"15990550246125825368"}},"outputId":"da24ef04-2892-49ce-cc9b-ee54a42d36ab"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-02b51cef8a3b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_price\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_price\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'price'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'price'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4911\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4912\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4913\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4914\u001b[0m         )\n\u001b[1;32m   4915\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4148\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4149\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4150\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   4183\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4184\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4185\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4186\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6015\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6016\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6017\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6018\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6019\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['price'] not found in axis\""]}]},{"cell_type":"code","source":[],"metadata":{"id":"yLhgSEnp63CS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_predictions.to_csv('test_predictions.csv', index=False)"],"metadata":{"id":"oRDOSPjFp_TT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6Gzgmb98Z5LQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MDNbZJBlZ5Hr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"VzmHTiRaZ5BM"},"execution_count":null,"outputs":[]}]}